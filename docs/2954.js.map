{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/markdown/markdown.js"],"names":["conf","comments","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","control","noncontrol","escapes","jsescapes","empty","tokenizer","root","token","next","nextEmbedded","include","codeblock","codeblockgh","linecontent","html","cases","comment","tag","switchTo","embeddedStyle","embeddedScript"],"mappings":"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","file":"2954.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        blockComment: ['<!--', '-->',]\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>', notIn: ['string'] }\n    ],\n    surroundingPairs: [\n        { open: '(', close: ')' },\n        { open: '[', close: ']' },\n        { open: '`', close: '`' },\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*<!--\\\\s*#?region\\\\b.*-->\"),\n            end: new RegExp(\"^\\\\s*<!--\\\\s*#?endregion\\\\b.*-->\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.md',\n    // escape codes\n    control: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n    noncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n    escapes: /\\\\(?:@control)/,\n    // escape codes for javascript/CSS strings\n    jsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n    // non matched elements\n    empty: [\n        'area', 'base', 'basefont', 'br', 'col', 'frame',\n        'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'\n    ],\n    tokenizer: {\n        root: [\n            // headers (with #)\n            [/^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/, ['white', 'keyword', 'keyword', 'keyword']],\n            // headers (with =)\n            [/^\\s*(=+|\\-+)\\s*$/, 'keyword'],\n            // headers (with ***)\n            [/^\\s*((\\*[ ]?)+)\\s*$/, 'meta.separator'],\n            // quote\n            [/^\\s*>+/, 'comment'],\n            // list (starting with * or number)\n            [/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, 'keyword'],\n            // code block (4 spaces indent)\n            [/^(\\t|[ ]{4})[^ ].*$/, 'string'],\n            // code block (3 tilde)\n            [/^\\s*~~~\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, { token: 'string', next: '@codeblock' }],\n            // github style code blocks (with backticks and language)\n            [/^\\s*```\\s*((?:\\w|[\\/\\-#])+).*$/, { token: 'string', next: '@codeblockgh', nextEmbedded: '$1' }],\n            // github style code blocks (with backticks but no language)\n            [/^\\s*```\\s*$/, { token: 'string', next: '@codeblock' }],\n            // markup within lines\n            { include: '@linecontent' },\n        ],\n        codeblock: [\n            [/^\\s*~~~\\s*$/, { token: 'string', next: '@pop' }],\n            [/^\\s*```\\s*$/, { token: 'string', next: '@pop' }],\n            [/.*$/, 'variable.source'],\n        ],\n        // github style code blocks\n        codeblockgh: [\n            [/```\\s*$/, { token: 'variable.source', next: '@pop', nextEmbedded: '@pop' }],\n            [/[^`]+/, 'variable.source'],\n        ],\n        linecontent: [\n            // escapes\n            [/&\\w+;/, 'string.escape'],\n            [/@escapes/, 'escape'],\n            // various markup\n            [/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, 'strong'],\n            [/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, 'strong'],\n            [/\\b_[^_]+_\\b/, 'emphasis'],\n            [/\\*([^\\\\*]|@escapes)+\\*/, 'emphasis'],\n            [/`([^\\\\`]|@escapes)+`/, 'variable'],\n            // links\n            [/\\{+[^}]+\\}+/, 'string.target'],\n            [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, ['string.link', '', 'string.link']],\n            [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, 'string.link'],\n            // or html\n            { include: 'html' },\n        ],\n        // Note: it is tempting to rather switch to the real HTML mode instead of building our own here\n        // but currently there is a limitation in Monarch that prevents us from doing it: The opening\n        // '<' would start the HTML mode, however there is no way to jump 1 character back to let the\n        // HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\n        // we cannot correctly tokenize it in that mode yet.\n        html: [\n            // html tags\n            [/<(\\w+)\\/>/, 'tag'],\n            [/<(\\w+)/, {\n                    cases: {\n                        '@empty': { token: 'tag', next: '@tag.$1' },\n                        '@default': { token: 'tag', next: '@tag.$1' }\n                    }\n                }],\n            [/<\\/(\\w+)\\s*>/, { token: 'tag' }],\n            [/<!--/, 'comment', '@comment']\n        ],\n        comment: [\n            [/[^<\\-]+/, 'comment.content'],\n            [/-->/, 'comment', '@pop'],\n            [/<!--/, 'comment.content.invalid'],\n            [/[<\\-]/, 'comment.content']\n        ],\n        // Almost full HTML tag matching, complete with embedded scripts & styles\n        tag: [\n            [/[ \\t\\r\\n]+/, 'white'],\n            [/(type)(\\s*=\\s*)(\")([^\"]+)(\")/, ['attribute.name.html', 'delimiter.html', 'string.html',\n                    { token: 'string.html', switchTo: '@tag.$S2.$4' },\n                    'string.html']],\n            [/(type)(\\s*=\\s*)(')([^']+)(')/, ['attribute.name.html', 'delimiter.html', 'string.html',\n                    { token: 'string.html', switchTo: '@tag.$S2.$4' },\n                    'string.html']],\n            [/(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, ['attribute.name.html', 'delimiter.html', 'string.html']],\n            [/\\w+/, 'attribute.name.html'],\n            [/\\/>/, 'tag', '@pop'],\n            [/>/, {\n                    cases: {\n                        '$S2==style': { token: 'tag', switchTo: 'embeddedStyle', nextEmbedded: 'text/css' },\n                        '$S2==script': {\n                            cases: {\n                                '$S3': { token: 'tag', switchTo: 'embeddedScript', nextEmbedded: '$S3' },\n                                '@default': { token: 'tag', switchTo: 'embeddedScript', nextEmbedded: 'text/javascript' }\n                            }\n                        },\n                        '@default': { token: 'tag', next: '@pop' }\n                    }\n                }],\n        ],\n        embeddedStyle: [\n            [/[^<]+/, ''],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\n            [/</, '']\n        ],\n        embeddedScript: [\n            [/[^<]+/, ''],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\n            [/</, '']\n        ],\n    }\n};\n"],"sourceRoot":""}