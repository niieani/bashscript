{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/scss/scss.js"],"names":["__webpack_require__","d","__webpack_exports__","language","conf","wordPattern","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","ws","identifier","token","tokenizer","root","include","selector","next","selectorbody","selectorname","selectorattribute","term","rulevalue","switchTo","nestedproperty","warndebug","import","variabledeclaration","urldeclaration","parenthizedterm","declarationbody","extendbody","variablereference","variableinterpolation","comment","name","numbers","units","functiondeclaration","mixindeclaration","parameterdeclaration","includedeclaration","keyframedeclaration","keyframebody","controlstatement","controlstatementdeclaration","functionbody","functioninvocation","functionarguments","strings","stringenddoublequote","stringendquote"],"mappings":"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","file":"46.bundle.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|([@$#!.:]?[\\w-?]+%?)|[@#!.]/g,\n    comments: {\n        blockComment: ['/*', '*/'],\n        lineComment: '//'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/\"),\n            end: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.scss',\n    ws: '[ \\t\\n\\r\\f]*',\n    identifier: '-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.bracket' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    tokenizer: {\n        root: [\n            { include: '@selector' },\n        ],\n        selector: [\n            { include: '@comments' },\n            { include: '@import' },\n            { include: '@variabledeclaration' },\n            { include: '@warndebug' },\n            ['[@](include)', { token: 'keyword', next: '@includedeclaration' }],\n            ['[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)', { token: 'keyword', next: '@keyframedeclaration' }],\n            ['[@](page|content|font-face|-moz-document)', { token: 'keyword' }],\n            ['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],\n            ['[@](function)', { token: 'keyword', next: '@functiondeclaration' }],\n            ['[@](mixin)', { token: 'keyword', next: '@mixindeclaration' }],\n            ['url(\\\\-prefix)?\\\\(', { token: 'meta', next: '@urldeclaration' }],\n            { include: '@controlstatement' },\n            { include: '@selectorname' },\n            ['[&\\\\*]', 'tag'],\n            ['[>\\\\+,]', 'delimiter'],\n            ['\\\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],\n            ['{', { token: 'delimiter.curly', next: '@selectorbody' }],\n        ],\n        selectorbody: [\n            ['[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'],\n            { include: '@selector' },\n            ['[@](extend)', { token: 'keyword', next: '@extendbody' }],\n            ['[@](return)', { token: 'keyword', next: '@declarationbody' }],\n            ['}', { token: 'delimiter.curly', next: '@pop' }],\n        ],\n        selectorname: [\n            ['#{', { token: 'meta', next: '@variableinterpolation' }],\n            ['(\\\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'],\n        ],\n        selectorattribute: [\n            { include: '@term' },\n            [']', { token: 'delimiter.bracket', next: '@pop' }],\n        ],\n        term: [\n            { include: '@comments' },\n            ['url(\\\\-prefix)?\\\\(', { token: 'meta', next: '@urldeclaration' }],\n            { include: '@functioninvocation' },\n            { include: '@numbers' },\n            { include: '@strings' },\n            { include: '@variablereference' },\n            ['(and\\\\b|or\\\\b|not\\\\b)', 'operator'],\n            { include: '@name' },\n            ['([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])', 'operator'],\n            [',', 'delimiter'],\n            ['!default', 'literal'],\n            ['\\\\(', { token: 'delimiter.parenthesis', next: '@parenthizedterm' }],\n        ],\n        rulevalue: [\n            { include: '@term' },\n            ['!important', 'literal'],\n            [';', 'delimiter', '@pop'],\n            ['{', { token: 'delimiter.curly', switchTo: '@nestedproperty' }],\n            ['(?=})', { token: '', next: '@pop' }],\n        ],\n        nestedproperty: [\n            ['[*_]?@identifier@ws:', 'attribute.name', '@rulevalue'],\n            { include: '@comments' },\n            ['}', { token: 'delimiter.curly', next: '@pop' }],\n        ],\n        warndebug: [\n            ['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }],\n        ],\n        import: [\n            ['[@](import)', { token: 'keyword', next: '@declarationbody' }],\n        ],\n        variabledeclaration: [\n            ['\\\\$@identifier@ws:', 'variable.decl', '@declarationbody'],\n        ],\n        urldeclaration: [\n            { include: '@strings' },\n            ['[^)\\r\\n]+', 'string'],\n            ['\\\\)', { token: 'meta', next: '@pop' }],\n        ],\n        parenthizedterm: [\n            { include: '@term' },\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }],\n        ],\n        declarationbody: [\n            { include: '@term' },\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }],\n        ],\n        extendbody: [\n            { include: '@selectorname' },\n            ['!optional', 'literal'],\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }],\n        ],\n        variablereference: [\n            ['\\\\$@identifier', 'variable.ref'],\n            ['\\\\.\\\\.\\\\.', 'operator'],\n            ['#{', { token: 'meta', next: '@variableinterpolation' }],\n        ],\n        variableinterpolation: [\n            { include: '@variablereference' },\n            ['}', { token: 'meta', next: '@pop' }],\n        ],\n        comments: [\n            ['\\\\/\\\\*', 'comment', '@comment'],\n            ['\\\\/\\\\/+.*', 'comment'],\n        ],\n        comment: [\n            ['\\\\*\\\\/', 'comment', '@pop'],\n            ['.', 'comment'],\n        ],\n        name: [\n            ['@identifier', 'attribute.value'],\n        ],\n        numbers: [\n            ['(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', { token: 'number', next: '@units' }],\n            ['#[0-9a-fA-F_]+(?!\\\\w)', 'number.hex'],\n        ],\n        units: [\n            ['(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?', 'number', '@pop']\n        ],\n        functiondeclaration: [\n            ['@identifier@ws\\\\(', { token: 'meta', next: '@parameterdeclaration' }],\n            ['{', { token: 'delimiter.curly', switchTo: '@functionbody' }],\n        ],\n        mixindeclaration: [\n            // mixin with parameters\n            ['@identifier@ws\\\\(', { token: 'meta', next: '@parameterdeclaration' }],\n            // mixin without parameters\n            ['@identifier', 'meta'],\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }],\n        ],\n        parameterdeclaration: [\n            ['\\\\$@identifier@ws:', 'variable.decl'],\n            ['\\\\.\\\\.\\\\.', 'operator'],\n            [',', 'delimiter'],\n            { include: '@term' },\n            ['\\\\)', { token: 'meta', next: '@pop' }],\n        ],\n        includedeclaration: [\n            { include: '@functioninvocation' },\n            ['@identifier', 'meta'],\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }],\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }],\n        ],\n        keyframedeclaration: [\n            ['@identifier', 'meta'],\n            ['{', { token: 'delimiter.curly', switchTo: '@keyframebody' }],\n        ],\n        keyframebody: [\n            { include: '@term' },\n            ['{', { token: 'delimiter.curly', next: '@selectorbody' }],\n            ['}', { token: 'delimiter.curly', next: '@pop' }],\n        ],\n        controlstatement: [\n            ['[@](if|else|for|while|each|media)', { token: 'keyword.flow', next: '@controlstatementdeclaration' }],\n        ],\n        controlstatementdeclaration: [\n            ['(in|from|through|if|to)\\\\b', { token: 'keyword.flow' }],\n            { include: '@term' },\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }],\n        ],\n        functionbody: [\n            ['[@](return)', { token: 'keyword' }],\n            { include: '@variabledeclaration' },\n            { include: '@term' },\n            { include: '@controlstatement' },\n            [';', 'delimiter'],\n            ['}', { token: 'delimiter.curly', next: '@pop' }],\n        ],\n        functioninvocation: [\n            ['@identifier\\\\(', { token: 'meta', next: '@functionarguments' }],\n        ],\n        functionarguments: [\n            ['\\\\$@identifier@ws:', 'attribute.name'],\n            ['[,]', 'delimiter'],\n            { include: '@term' },\n            ['\\\\)', { token: 'meta', next: '@pop' }],\n        ],\n        strings: [\n            ['~?\"', { token: 'string.delimiter', next: '@stringenddoublequote' }],\n            ['~?\\'', { token: 'string.delimiter', next: '@stringendquote' }]\n        ],\n        stringenddoublequote: [\n            ['\\\\\\\\.', 'string'],\n            ['\"', { token: 'string.delimiter', next: '@pop' }],\n            ['.', 'string']\n        ],\n        stringendquote: [\n            ['\\\\\\\\.', 'string'],\n            ['\\'', { token: 'string.delimiter', next: '@pop' }],\n            ['.', 'string']\n        ]\n    }\n};\n"],"sourceRoot":""}