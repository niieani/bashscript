{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/less/less.js"],"names":["__webpack_require__","d","__webpack_exports__","language","conf","wordPattern","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","identifier","identifierPlus","token","tokenizer","root","include","next","nestedJSBegin","nextEmbedded","nestedJSEnd","operators","keyword","urldeclaration","attribute","comment","numbers","units","strings","stringsEndDoubleQuote","stringsEndQuote","atRules"],"mappings":"iIAAAA,EAAAC,EAAAC,EAAA,6BAAAC,IAKA,IAAAC,GACAC,YAAA,iDACAC,UACAC,cAAA,WACAC,YAAA,MAEAC,WACA,IAAW,MACX,UACA,UAEAC,mBACSC,KAAA,IAASC,MAAA,IAAYC,OAAA,sBACrBF,KAAA,IAAAC,MAAA,IAAAC,OAAA,sBACAF,KAAA,IAAAC,MAAA,IAAAC,OAAA,sBACAF,KAAA,IAAAC,MAAA,IAAAC,OAAA,sBACAF,KAAA,IAAAC,MAAA,IAAAC,OAAA,sBAETC,mBACSH,KAAA,IAASC,MAAA,MACTD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MAETG,SACAC,SACAC,MAAA,IAAAC,OAAA,gDACAC,IAAA,IAAAD,OAAA,2CAIAf,GACAiB,aAAA,GACAC,aAAA,QACAC,WAAA,sHACAC,eAAA,0HACAd,WACSE,KAAA,IAASC,MAAA,IAAYY,MAAA,oBACrBb,KAAA,IAAAC,MAAA,IAAAY,MAAA,sBACAb,KAAA,IAAAC,MAAA,IAAAY,MAAA,0BACAb,KAAA,IAAAC,MAAA,IAAAY,MAAA,oBAETC,WACAC,OACaC,QAAA,mBACb,qBACaA,QAAA,cACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACb,yCAA0C,gCAC1C,sBAAoCH,MAAA,MAAAI,KAAA,qBACpC,eAAiB,cACjB,QAAkB,cAClB,8BACA,YACA,uDACA,mCACA,0BACaD,QAAA,eACb,sDACA,8BACA,uBAEAE,gBACA,4BACA,KAAmBL,MAAA,qBAAAI,KAAA,eAAAE,aAAA,qBAEnBC,cACA,KAAmBP,MAAA,qBAAAI,KAAA,OAAAE,aAAA,UAEnBE,YACA,0CAEAC,UACA,iQAEAC,iBACaP,QAAA,aACb,uBACA,OAAqBH,MAAA,MAAAI,KAAA,UAErBO,YACaR,QAAA,mBACAA,QAAA,cACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACb,uDACA,wBACA,kCACaA,QAAA,eACb,8BACA,SAAmB,qBACnB,gBAAiB,cACjB,MAAgB,qBAChB,sBACA,WACA,wBAEArB,WACA,gCACA,wBAEA8B,UACA,4BACA,gBAEAC,UACA,oCAAkDb,MAAA,yBAAAI,KAAA,YAClD,gDAEAU,QACA,uHAEAC,UACA,OAAqBf,MAAA,mBAAAI,KAAA,4BACrB,OAAsBJ,MAAA,mBAAAI,KAAA,sBAEtBY,wBACA,mBACA,KAAmBhB,MAAA,mBAAAI,KAAA,aACnB,eAEAa,kBACA,mBACA,KAAoBjB,MAAA,mBAAAI,KAAA,aACpB,eAEAc,UACaf,QAAA,cACAA,QAAA,aACb,qBACA,SAAmB,qBACnB","file":"27.bundle.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|([@#!.:]?[\\w-?]+%?)|[@#!.]/g,\n    comments: {\n        blockComment: ['/*', '*/'],\n        lineComment: '//'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')'],\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/\"),\n            end: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.less',\n    identifier: '-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\n    identifierPlus: '-?-?([a-zA-Z:.]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-:.]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.bracket' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    tokenizer: {\n        root: [\n            { include: '@nestedJSBegin' },\n            ['[ \\\\t\\\\r\\\\n]+', ''],\n            { include: '@comments' },\n            { include: '@keyword' },\n            { include: '@strings' },\n            { include: '@numbers' },\n            ['[*_]?[a-zA-Z\\\\-\\\\s]+(?=:.*(;|(\\\\\\\\$)))', 'attribute.name', '@attribute'],\n            ['url(\\\\-prefix)?\\\\(', { token: 'tag', next: '@urldeclaration' }],\n            ['[{}()\\\\[\\\\]]', '@brackets'],\n            ['[,:;]', 'delimiter'],\n            ['#@identifierPlus', 'tag.id'],\n            ['&', 'tag'],\n            ['\\\\.@identifierPlus(?=\\\\()', 'tag.class', '@attribute'],\n            ['\\\\.@identifierPlus', 'tag.class'],\n            ['@identifierPlus', 'tag'],\n            { include: '@operators' },\n            ['@(@identifier(?=[:,\\\\)]))', 'variable', '@attribute'],\n            ['@(@identifier)', 'variable'],\n            ['@', 'key', '@atRules']\n        ],\n        nestedJSBegin: [\n            ['``', 'delimiter.backtick'],\n            ['`', { token: 'delimiter.backtick', next: '@nestedJSEnd', nextEmbedded: 'text/javascript' }],\n        ],\n        nestedJSEnd: [\n            ['`', { token: 'delimiter.backtick', next: '@pop', nextEmbedded: '@pop' }],\n        ],\n        operators: [\n            ['[<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~]', 'operator']\n        ],\n        keyword: [\n            ['(@[\\\\s]*import|![\\\\s]*important|true|false|when|iscolor|isnumber|isstring|iskeyword|isurl|ispixel|ispercentage|isem|hue|saturation|lightness|alpha|lighten|darken|saturate|desaturate|fadein|fadeout|fade|spin|mix|round|ceil|floor|percentage)\\\\b', 'keyword']\n        ],\n        urldeclaration: [\n            { include: '@strings' },\n            ['[^)\\r\\n]+', 'string'],\n            ['\\\\)', { token: 'tag', next: '@pop' }],\n        ],\n        attribute: [\n            { include: '@nestedJSBegin' },\n            { include: '@comments' },\n            { include: '@strings' },\n            { include: '@numbers' },\n            { include: '@keyword' },\n            ['[a-zA-Z\\\\-]+(?=\\\\()', 'attribute.value', '@attribute'],\n            ['>', 'operator', '@pop'],\n            ['@identifier', 'attribute.value'],\n            { include: '@operators' },\n            ['@(@identifier)', 'variable'],\n            ['[)\\\\}]', '@brackets', '@pop'],\n            ['[{}()\\\\[\\\\]>]', '@brackets'],\n            ['[;]', 'delimiter', '@pop'],\n            ['[,=:]', 'delimiter'],\n            ['\\\\s', ''],\n            ['.', 'attribute.value']\n        ],\n        comments: [\n            ['\\\\/\\\\*', 'comment', '@comment'],\n            ['\\\\/\\\\/+.*', 'comment'],\n        ],\n        comment: [\n            ['\\\\*\\\\/', 'comment', '@pop'],\n            ['.', 'comment'],\n        ],\n        numbers: [\n            ['(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', { token: 'attribute.value.number', next: '@units' }],\n            ['#[0-9a-fA-F_]+(?!\\\\w)', 'attribute.value.hex']\n        ],\n        units: [\n            ['(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?', 'attribute.value.unit', '@pop']\n        ],\n        strings: [\n            ['~?\"', { token: 'string.delimiter', next: '@stringsEndDoubleQuote' }],\n            ['~?\\'', { token: 'string.delimiter', next: '@stringsEndQuote' }]\n        ],\n        stringsEndDoubleQuote: [\n            ['\\\\\\\\\"', 'string'],\n            ['\"', { token: 'string.delimiter', next: '@popall' }],\n            ['.', 'string']\n        ],\n        stringsEndQuote: [\n            ['\\\\\\\\\\'', 'string'],\n            ['\\'', { token: 'string.delimiter', next: '@popall' }],\n            ['.', 'string']\n        ],\n        atRules: [\n            { include: '@comments' },\n            { include: '@strings' },\n            ['[()]', 'delimiter'],\n            ['[\\\\{;]', 'delimiter', '@pop'],\n            ['.', 'key']\n        ]\n    }\n};\n"],"sourceRoot":""}