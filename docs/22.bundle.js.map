{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/handlebars/handlebars.js"],"names":["__webpack_require__","d","__webpack_exports__","language","_monaco","monaco","self","EMPTY_ELEMENTS","conf","wordPattern","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","onEnterRules","beforeText","RegExp","join","afterText","action","indentAction","languages","IndentAction","IndentOutdent","Indent","defaultToken","tokenPostfix","tokenizer","root","token","switchTo","next","doctype","comment","otherTag","script","nextEmbedded","scriptAfterType","scriptAfterTypeEquals","scriptWithCustomType","scriptEmbedded","style","styleAfterType","styleAfterTypeEquals","styleWithCustomType","styleEmbedded","handlebarsInSimpleState","include","handlebarsInEmbeddedState","handlebarsRoot"],"mappings":"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","file":"22.bundle.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n// Allow for running under nodejs/requirejs in tests\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\nvar EMPTY_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];\nexport var conf = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n    comments: {\n        blockComment: ['{{!--', '--}}']\n    },\n    brackets: [\n        ['<!--', '-->'],\n        ['<', '>'],\n        ['{{', '}}'],\n        ['{', '}'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' }\n    ],\n    surroundingPairs: [\n        { open: '<', close: '>' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' }\n    ],\n    onEnterRules: [\n        {\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n            afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n            action: { indentAction: _monaco.languages.IndentAction.IndentOutdent }\n        },\n        {\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n            action: { indentAction: _monaco.languages.IndentAction.Indent }\n        }\n    ],\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '',\n    // ignoreCase: true,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.root' }],\n            [/<!DOCTYPE/, 'metatag.html', '@doctype'],\n            [/<!--/, 'comment.html', '@comment'],\n            [/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n            [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\n            [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\n            [/(<)([:\\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n            [/(<\\/)(\\w+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n            [/</, 'delimiter.html'],\n            [/\\{/, 'delimiter.html'],\n            [/[^<{]+/] // text\n        ],\n        doctype: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.comment' }],\n            [/[^>]+/, 'metatag.content.html'],\n            [/>/, 'metatag.html', '@pop'],\n        ],\n        comment: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.comment' }],\n            [/-->/, 'comment.html', '@pop'],\n            [/[^-]+/, 'comment.content.html'],\n            [/./, 'comment.content.html']\n        ],\n        otherTag: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.otherTag' }],\n            [/\\/?>/, 'delimiter.html', '@pop'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/],\n        ],\n        // -- BEGIN <script> tags handling\n        // After <script\n        script: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.script' }],\n            [/type/, 'attribute.name', '@scriptAfterType'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\n            [/[ \\t\\r\\n]+/],\n            [/(<\\/)(script\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\n        ],\n        // After <script ... type\n        scriptAfterType: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.scriptAfterType' }],\n            [/=/, 'delimiter', '@scriptAfterTypeEquals'],\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <script ... type =\n        scriptAfterTypeEquals: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.scriptAfterTypeEquals' }],\n            [/\"([^\"]*)\"/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],\n            [/'([^']*)'/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <script ... type = $S2\n        scriptWithCustomType: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.scriptWithCustomType.$S2' }],\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.$S2', nextEmbedded: '$S2' }],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        scriptEmbedded: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInEmbeddedState.scriptEmbedded.$S2', nextEmbedded: '@pop' }],\n            [/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\n        ],\n        // -- END <script> tags handling\n        // -- BEGIN <style> tags handling\n        // After <style\n        style: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.style' }],\n            [/type/, 'attribute.name', '@styleAfterType'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\n            [/[ \\t\\r\\n]+/],\n            [/(<\\/)(style\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\n        ],\n        // After <style ... type\n        styleAfterType: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.styleAfterType' }],\n            [/=/, 'delimiter', '@styleAfterTypeEquals'],\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <style ... type =\n        styleAfterTypeEquals: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.styleAfterTypeEquals' }],\n            [/\"([^\"]*)\"/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],\n            [/'([^']*)'/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <style ... type = $S2\n        styleWithCustomType: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.styleWithCustomType.$S2' }],\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.$S2', nextEmbedded: '$S2' }],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        styleEmbedded: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInEmbeddedState.styleEmbedded.$S2', nextEmbedded: '@pop' }],\n            [/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\n        ],\n        // -- END <style> tags handling\n        handlebarsInSimpleState: [\n            [/\\{\\{\\{?/, 'delimiter.handlebars'],\n            [/\\}\\}\\}?/, { token: 'delimiter.handlebars', switchTo: '@$S2.$S3' }],\n            { include: 'handlebarsRoot' }\n        ],\n        handlebarsInEmbeddedState: [\n            [/\\{\\{\\{?/, 'delimiter.handlebars'],\n            [/\\}\\}\\}?/, { token: 'delimiter.handlebars', switchTo: '@$S2.$S3', nextEmbedded: '$S3' }],\n            { include: 'handlebarsRoot' }\n        ],\n        handlebarsRoot: [\n            [/[#/][^\\s}]+/, 'keyword.helper.handlebars'],\n            [/else\\b/, 'keyword.helper.handlebars'],\n            [/[\\s]+/],\n            [/[^}]/, 'variable.parameter.handlebars'],\n        ],\n    },\n};\n"],"sourceRoot":""}