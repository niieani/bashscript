{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js"],"names":["createScanner","text","ignoreTrivia","pos","len","length","value","tokenOffset","token","scanError","scanHexDigits","count","exact","digits","ch","charCodeAt","scanNext","code","isWhiteSpace","String","fromCharCode","isLineBreak","result","start","substring","ch_1","scanString","commentClosed","isDigit","end","scanNumber","isUnknownContentCharacter","setPosition","newPosition","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenError","format","documentText","range","options","initialIndentLevel","formatText","formatTextStart","rangeStart","rangeEnd","offset","isEOL","endOffset","content","i","nChars","tabSize","charAt","Math","floor","computeIndentLevel","indentValue","eol","getEOL","lineBreak","indentLevel","insertSpaces","repeat","scanner","hasError","newLineAndIndent","editOperations","addEdit","startOffset","push","firstToken","firstTokenStart","firstTokenEnd","secondToken","replaceContent","s","indexOf","visit","visitor","_scanner","toNoArgVisit","visitFunction","toOneArgVisit","arg","onObjectBegin","onObjectProperty","onObjectEnd","onArrayBegin","onArrayEnd","onLiteralValue","onSeparator","onComment","onError","disallowComments","allowTrailingComma","handleError","error","skipUntilAfter","skipUntil","parseString","isValue","parseValue","needsComma","parseArray","parseObject","JSON","parse","e","parseLiteral","main_createScanner","main_parse","errors","currentProperty","currentParent","previousParents","onValue","Array","isArray","object","name","pop","array","main_format","Position","Range","Location","DiagnosticSeverity","Diagnostic","Command","TextEdit","TextDocumentEdit","create","line","character","is","candidate","Is","defined","number","one","two","three","four","Error","uri","string","undefined","Warning","Information","Hint","message","severity","source","title","command","args","_i","arguments","replace","newText","insert","position","del","textDocument","edits","VersionedTextDocumentIdentifier","TextDocumentIdentifier","TextDocumentItem","MarkupKind","CompletionItemKind","InsertTextFormat","CompletionItem","CompletionList","MarkedString","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolInformation","CodeActionContext","CodeLens","FormattingOptions","TextEditChangeImpl","this","prototype","delete","add","edit","all","clear","splice","WorkspaceChange","workspaceEdit","_this","_textEditChanges","Object","_workspaceEdit","documentChanges","forEach","textDocumentEdit","textEditChange","changes","keys","key","defineProperty","get","enumerable","configurable","getTextEditChange","version","languageId","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","Color","File","Reference","Folder","EnumMember","Constant","Struct","Event","Operator","TypeParameter","label","items","isIncomplete","fromPlainText","plainText","documentation","parameters","Read","Write","kind","Namespace","Package","Number","Boolean","Key","Null","containerName","location","diagnostics","typedArray","data","boolean","DocumentLink","target","TextDocument","TextDocumentSaveReason","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","mergeSort","compare","p","left","slice","right","leftIdx","rightIdx","ret","a","b","lastModifiedOffset","Manual","AfterDelay","FocusOut","_uri","_languageId","_version","_content","_lineOffsets","update","event","getLineOffsets","lineOffsets","isLineStart","max","min","low","high","mid","lineOffset","nextLineOffset","toString","call","check","every"],"mappings":"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","file":"11.bundle.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 /* Unknown */, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var commentClosed = false;\n                    while (pos < len) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && (pos + 1 < len) && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n//# sourceMappingURL=scanner.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\nexport function format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, 0, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = createScanner(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, offset, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=format.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = void 0;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object'\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.columnOffset = void 0;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getLiteralNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.columnOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = void 0;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = void 0;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [] }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getLiteralNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.columnOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return void 0;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return void 0;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return void 0;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return void 0;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    if (node.type === 'array') {\n        return node.children.map(getNodeValue);\n    }\n    else if (node.type === 'object') {\n        var obj = Object.create(null);\n        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n            var prop = _a[_i];\n            obj[prop.children[0].value] = getNodeValue(prop.children[1]);\n        }\n        return obj;\n    }\n    return node.value;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options) {\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(2 /* InvalidNumberFormat */);\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        return true;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    var _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* LineCommentTrivia */:\n            case 13 /* BlockCommentTrivia */:\n            case 17 /* EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== void 0) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* EOF */);\n    return parts.join('');\n}\nfunction getLiteralNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        default: return 'null';\n    }\n}\n//# sourceMappingURL=parser.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format.js';\nimport * as edit from './impl/edit.js';\nimport * as scanner from './impl/scanner.js';\nimport * as parser from './impl/parser.js';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport var stripComments = parser.stripComments;\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nexport function applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = edit.applyEdit(text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n/**\n * The Position namespace provides helper functions to work with\n * [Position](#Position) literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        return { line: line, character: character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * [Range](#Range) literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * [Location](#Location) literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri: uri, range: range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The diagnostic's serverity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * [Diagnostic](#Diagnostic) literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source) {\n        var result = { range: range, message: message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * [Command](#Command) literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var result = { title: title, command: command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.title);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range: range, newText: newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates a insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText: newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range: range, newText: '' };\n    }\n    TextEdit.del = del;\n})(TextEdit || (TextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument: textDocument, edits: edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nvar TextEditChangeImpl = /** @class */ (function () {\n    function TextEditChangeImpl(edits) {\n        this.edits = edits;\n    }\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\n        this.edits.push(TextEdit.insert(position, newText));\n    };\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\n        this.edits.push(TextEdit.replace(range, newText));\n    };\n    TextEditChangeImpl.prototype.delete = function (range) {\n        this.edits.push(TextEdit.del(range));\n    };\n    TextEditChangeImpl.prototype.add = function (edit) {\n        this.edits.push(edit);\n    };\n    TextEditChangeImpl.prototype.all = function () {\n        return this.edits;\n    };\n    TextEditChangeImpl.prototype.clear = function () {\n        this.edits.splice(0, this.edits.length);\n    };\n    return TextEditChangeImpl;\n}());\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nvar WorkspaceChange = /** @class */ (function () {\n    function WorkspaceChange(workspaceEdit) {\n        var _this = this;\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                workspaceEdit.documentChanges.forEach(function (textDocumentEdit) {\n                    var textEditChange = new TextEditChangeImpl(textDocumentEdit.edits);\n                    _this._textEditChanges[textDocumentEdit.textDocument.uri] = textEditChange;\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    _this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n    }\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\n        /**\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\n         * use to be returned from a workspace edit operation like rename.\n         */\n        get: function () {\n            return this._workspaceEdit;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\n        if (VersionedTextDocumentIdentifier.is(key)) {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    documentChanges: []\n                };\n            }\n            if (!this._workspaceEdit.documentChanges) {\n                throw new Error('Workspace edit is not configured for versioned document changes.');\n            }\n            var textDocument = key;\n            var result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                var edits = [];\n                var textDocumentEdit = {\n                    textDocument: textDocument,\n                    edits: edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    changes: Object.create(null)\n                };\n            }\n            if (!this._workspaceEdit.changes) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            var result = this._textEditChanges[key];\n            if (!result) {\n                var edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    };\n    return WorkspaceChange;\n}());\nexport { WorkspaceChange };\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri: uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param uri The document's text.\n     */\n    function create(uri, version) {\n        return { uri: uri, version: version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.number(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * [TextDocumentItem](#TextDocumentItem) literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri: uri, languageId: languageId, version: version, text: text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n})(MarkupKind || (MarkupKind = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label: label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n})(MarkedString || (MarkedString = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * [ParameterInformation](#ParameterInformation) literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label: label, documentation: documentation } : { label: label };\n    }\n    ParameterInformation.create = create;\n    ;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * [SignatureInformation](#SignatureInformation) literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation) {\n        var parameters = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            parameters[_i - 2] = arguments[_i];\n        }\n        var result = { label: label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrance.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * [DocumentHighlight](#DocumentHighlight) literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     */\n    function create(range, kind) {\n        var result = { range: range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol, defaults to the current document.\n     * @param containerName The name of the symbol containg the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        var result = {\n            name: name,\n            kind: kind,\n            location: { uri: uri, range: range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * [CodeActionContext](#CodeActionContext) literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics) {\n        return { diagnostics: diagnostics };\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * [CodeLens](#CodeLens) literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        var result = { range: range };\n        if (Is.defined(data))\n            result.data = data;\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * [FormattingOptions](#FormattingOptions) literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * A document link is a range in a text document that links to an internal or external resource, like another\n * text document or a web site.\n */\nvar DocumentLink = /** @class */ (function () {\n    function DocumentLink() {\n    }\n    return DocumentLink;\n}());\nexport { DocumentLink };\n/**\n * The DocumentLink namespace provides helper functions to work with\n * [DocumentLink](#DocumentLink) literals.\n */\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target) {\n        return { range: range, target: target };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\nexport var EOL = ['\\n', '\\r\\n', '\\r'];\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        var text = document.getText();\n        var sortedEdits = mergeSort(edits, function (a, b) {\n            var diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return 0;\n        });\n        var lastModifiedOffset = text.length;\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\n            var e = sortedEdits[i];\n            var startOffset = document.offsetAt(e.range.start);\n            var endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Ovelapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        var p = (data.length / 2) | 0;\n        var left = data.slice(0, p);\n        var right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        var leftIdx = 0;\n        var rightIdx = 0;\n        var i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            var ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * Represents reasons why a text document is saved.\n */\nexport var TextDocumentSaveReason;\n(function (TextDocumentSaveReason) {\n    /**\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\n     * or by an API call.\n     */\n    TextDocumentSaveReason.Manual = 1;\n    /**\n     * Automatic after a delay.\n     */\n    TextDocumentSaveReason.AfterDelay = 2;\n    /**\n     * When the editor lost focus.\n     */\n    TextDocumentSaveReason.FocusOut = 3;\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\nvar FullTextDocument = /** @class */ (function () {\n    function FullTextDocument(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = null;\n    }\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\n        get: function () {\n            return this._languageId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\n        get: function () {\n            return this._version;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FullTextDocument.prototype.getText = function (range) {\n        if (range) {\n            var start = this.offsetAt(range.start);\n            var end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    };\n    FullTextDocument.prototype.update = function (event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = null;\n    };\n    FullTextDocument.prototype.getLineOffsets = function () {\n        if (this._lineOffsets === null) {\n            var lineOffsets = [];\n            var text = this._content;\n            var isLineStart = true;\n            for (var i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                var ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    };\n    FullTextDocument.prototype.positionAt = function (offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        var lineOffsets = this.getLineOffsets();\n        var low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        var line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    };\n    FullTextDocument.prototype.offsetAt = function (position) {\n        var lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        var lineOffset = lineOffsets[position.line];\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    };\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\n        get: function () {\n            return this.getLineOffsets().length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FullTextDocument;\n}());\nvar Is;\n(function (Is) {\n    var toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n"],"sourceRoot":""}